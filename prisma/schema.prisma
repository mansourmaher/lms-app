// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "cockroachdb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  STUDENT
  ADMIN
  TEACHER
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  password       String?
  role           UserRole         @default(STUDENT)
  image          String?
  createdAt      DateTime?        @default(now())
  accounts       Account[]
  teacherAccess  Boolean          @default(false)
  teacherRequest TeacherRequest[]
  filier         String?
  origin         Origin?

  about        String?
  DateOfBirth  DateTime?
  subtitle     String?
  linkedin     String?
  twitter      String?
  github       String?
  patiants     String[]
  points       Int?            @default(0)
  courseReview CourseReview[]
  course       Course[]
  courseUser   CourseUser[]
  report       Report[]
  teacher      Notifications[] @relation("teacher")
  student      Notifications[] @relation("student")

  post         Post[]
  postResponse PostResponse[]

  Message Message[]
  Meeting Meeting[]
}

model Origin {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
  value  String
  label  String
  flag   String
  region String
  lalng  Int[]
}

model TeacherRequest {
  id        String   @id @default(uuid())
  title     String
  userId    String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  user      User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model Course {
  id     String @id @default(uuid())
  userId String
  user   User?  @relation(fields: [userId], references: [id])

  title         String
  description   String?
  imageUrl      String?
  price         Float?
  isPublished   Boolean    @default(false)
  status        String     @default("pending")
  whyitsrejcted String?
  categoryId    String?
  category      Category?  @relation(fields: [categoryId], references: [id])
  target        String[]
  level         String?
  totalStars    Int?       @default(0)
  totalReviews  Int?       @default(0)
  totalhours    Float?
  chapters      Chapter[]
  purchases     Purchase[]

  attachment     Attachment[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  quiz           Quiz[]
  review         CourseReview[]
  courseUser     CourseUser[]
  totalPurchases Int?           @default(0)
  report         Report[]
  Community      Community?
  Conversation   Conversation[]

  @@index([categoryId])
}

model CourseUser {
  id        String   @id @default(uuid())
  userId    String
  user      User?    @relation(fields: [userId], references: [id])
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("Not started")
  score     Float?

  classement Int? @default(0)

  @@unique([userId, courseId])
}

model CourseReview {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  starts    Int?
  comment   String?
  createdAt DateTime @default(now())
  likes     Int?     @default(0)
  dislikes  Int?     @default(0)
  isMasqued Boolean  @default(false)

  courseId String
  course   Course @relation(fields: [courseId], references: [id])
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  chapterId String
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId], name: "courseId")
  @@index([chapterId], name: "chapterId")
}

model Category {
  id        String   @id @default(uuid())
  name      String
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id          String       @id @default(uuid())
  title       String
  descreption String?
  videoUrl    String?
  resources   Attachment[]
  toDoName    String?

  toDo String?

  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData  MuxData?
  courseId String
  course   Course   @relation(fields: [courseId], references: [id])

  userProgress UserProgress[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  quiz         Quiz[]
  report       Report[]

  @@index([courseId])
}

model Report {
  id String @id @default(uuid())

  courseId String
  course   Course @relation(fields: [courseId], references: [id])
  userId   String

  user      User    @relation(fields: [userId], references: [id])
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id])
  work      String?
  workUrl   String?
  grade     Float?
  note      String?
  status    String  @default("pending")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MuxData {
  id String @id @default(uuid())

  playbackId String
  assetId    String

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id])
}

model UserProgress {
  id        String  @id @default(uuid())
  userId    String
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String
  stripeCustomerId String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Purchase {
  id       String @id @default(uuid())
  userId   String
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

model Quiz {
  id        String    @id @default(uuid())
  question  String
  answer    String
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id])
  createdAt DateTime  @default(now())
  chapterId String
  chapter   Chapter   @relation(fields: [chapterId], references: [id])
  options   Options[]
  //

  @@index([courseId], name: "courseId")
  @@index([chapterId], name: "chapterId")
}

model Options {
  id            String   @id @default(uuid())
  options       String[]
  correctOption String
  quizId        String
  quiz          Quiz     @relation(fields: [quizId], references: [id])

  @@index([quizId], name: "quizId")
}

model Notifications {
  id           String   @id @default(uuid())
  teacher      String
  user         User     @relation("teacher", fields: [teacher], references: [id])
  student      String
  studentNotif User     @relation("student", fields: [student], references: [id])
  message      String
  courseId     String?
  chapterId    String?
  createdAt    DateTime @default(now())
  isRead       Boolean  @default(false)
}

model Community {
  id       String @id @default(uuid())
  title    String
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  @@unique([courseId])
}

model Post {
  id String @id @default(uuid())

  content             String
  userId              String
  user                User     @relation(fields: [userId], references: [id])
  isthecontentisimage Boolean  @default(false)
  imageurl            String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  communityId  String
  community    Community      @relation(fields: [communityId], references: [id])
  PostResponse PostResponse[]
}

model PostResponse {
  id String @id @default(uuid())

  content   String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  imageurl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId String?
  post   Post?   @relation(fields: [postId], references: [id])
}

model Conversation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  title     String?
  courseId  String?
  course    Course?  @relation(fields: [courseId], references: [id])

  paticipantsId String[]

  messages Message[]
}

model Message {
  id        String   @id @default(uuid())
  body      String
  createdAt DateTime @default(now())
  fileUrl   String?
  imageUrl  String?

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Meeting {
  id          String @id @default(uuid())
  title       String
  description String

  link      String
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}
