// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "cockroachdb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  STUDENT
  ADMIN
  TEACHER
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  password       String?
  role           UserRole         @default(STUDENT)
  image          String?
  createdAt      DateTime?        @default(now())
  accounts       Account[]
  teacherAccess  Boolean          @default(false)
  teacherRequest TeacherRequest[]
  filier         String?
  origin         Origin?

  about        String?
  DateOfBirth  DateTime?
  subtitle     String?
  patiants     String[]
  courseReview CourseReview[]
  course       Course[]
  courseUser   CourseUser[]
  report       Report[]
  teacher      Notifications[] @relation("teacher")
  student      Notifications[] @relation("student")
}

model Origin {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
  value  String
  label  String
  flag   String
  region String
  lalng  Int[]
}

model TeacherRequest {
  id        String   @id @default(uuid())
  title     String
  userId    String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  user      User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model Course {
  id     String @id @default(uuid())
  userId String
  user   User?  @relation(fields: [userId], references: [id])

  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean    @default(false)
  categoryId  String?
  category    Category?  @relation(fields: [categoryId], references: [id])
  chapters    Chapter[]
  purchases   Purchase[]

  attachment Attachment[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  quiz       Quiz[]
  review     CourseReview[]
  courseUser CourseUser[]
  report     Report[]

  @@index([categoryId])
}

model CourseUser {
  id        String   @id @default(uuid())
  userId    String
  user      User?    @relation(fields: [userId], references: [id])
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("Not started")

  @@unique([userId, courseId])
}

model CourseReview {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  starts    Int?
  comment   String?
  createdAt DateTime @default(now())
  likes     Int?     @default(0)
  dislikes  Int?     @default(0)

  courseId String
  course   Course @relation(fields: [courseId], references: [id])
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  chapterId String
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId], name: "courseId")
  @@index([chapterId], name: "chapterId")
}

model Category {
  id        String   @id @default(uuid())
  name      String
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id          String       @id @default(uuid())
  title       String
  descreption String?
  videoUrl    String?
  resources   Attachment[]
  toDoName    String?

  toDo String?

  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData  MuxData?
  courseId String
  course   Course   @relation(fields: [courseId], references: [id])

  userProgress UserProgress[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  quiz         Quiz[]
  report       Report[]

  @@unique([position, courseId])
  @@index([courseId])
}

model Report {
  id String @id @default(uuid())

  courseId String
  course   Course @relation(fields: [courseId], references: [id])
  userId   String

  user      User    @relation(fields: [userId], references: [id])
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id])
  work      String?
  workUrl   String?
  grade     Float?
  note      String?
  status    String @default("pending")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MuxData {
  id String @id @default(uuid())

  playbackId String
  assetId    String

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id])
}

model UserProgress {
  id        String  @id @default(uuid())
  userId    String
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id       String @id @default(uuid())
  userId   String
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

model Quiz {
  id       String @id @default(uuid())
  question String

  answer    String
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id])
  createdAt DateTime  @default(now())
  chapterId String
  chapter   Chapter   @relation(fields: [chapterId], references: [id])
  options   Options[]
  //

  @@index([courseId], name: "courseId")
  @@index([chapterId], name: "chapterId")
}

model Options {
  id            String   @id @default(uuid())
  options       String[]
  correctOption String
  quizId        String
  quiz          Quiz     @relation(fields: [quizId], references: [id])

  @@index([quizId], name: "quizId")
}

model Notifications {
  id           String   @id @default(uuid())
  teacher      String
  user         User     @relation("teacher", fields: [teacher], references: [id])
  student      String
  studentNotif User     @relation("student", fields: [student], references: [id])
  message      String
  createdAt    DateTime @default(now())
  isRead       Boolean  @default(false)
}
